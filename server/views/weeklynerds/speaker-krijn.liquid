{% layout "server/layouts/base.liquid" %}


{% block project %}

<ul class="subjects-overview">
    <li><h2> ‚ú® Speaker Krijn ‚ú®</h2></li>
    <li><p>Scroll down to see my notations</p></li>
    <li>  
        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
         <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19V5m0 14-4-4m4 4 4-4"/>
        </svg></li>
    </li>
</ul>
    {% comment %} <h2>Stop using JS, but instead HTML & CSS </h2> {% endcomment %}

<section class="map-overview">
<div class="window">
  <div class="toolbar">
    <div class="traffic-lights">
      <span class="red"></span>
      <span class="yellow"></span>
      <span class="green"></span>
    </div>
    <div class="title">ELEVENTH SPEAKER - KRIJN</div>
  </div>
  <div class="content">
    <aside class="sidebar">
      <div class="section">Favorites</div>
      <ul>
        <li>AirDrop</li>
        <li>Recents</li>
        <li>Applications</li>
        <li>Desktop</li>
        <li>Documents</li>
        <li>Downloads</li>
      </ul>
      <div class="section">iCloud</div>
      <ul>
        <li>iCloud Drive</li>
        <li>Shared</li>
      </ul>
      <div class="section">Tags</div>
      <ul class="tags">
        <li><span class="dot red-dot"></span>Red</li>
        <li><span class="dot orange-dot"></span>Orange</li>
        <li><span class="dot yellow-dot"></span>Yellow</li>
        <li><span class="dot green-dot"></span>Green</li>
        <li><span class="dot blue-dot"></span>Blue</li>
        <li><span class="dot purple-dot"></span>Purple</li>
        <li><span class="dot gray-dot"></span>Gray</li>
      </ul>
    </aside>


  <div class="main-content">
  
    <div class="single-project">
        <section class="introduction-project change-color">
          <ul>
            <li><p class="badge-lightpink">Speaker 11</p></li>
            <li><h1><span class="highlight">Forms </span> with HTML</h1></li>
            <li class="intro">
            </li>
          </ul>
        </section>


        <article class="project-section">
          <div class="text">
            <h2 class="gradient-greypink"> Summary </h2>
            <p>
            Krijn is an expert in browser technology and he says that writing good HTML is crucial. If you make a form and you write it with only HTMl, you will 
            get free in browser features as a extra for your form. It's important that you link the labels with the inputs, that you use the right input, use fieldset and required when it's nessessary.
            For a form plays validation a big role. If you use CSS combined with the HTMl, you can build a perfect validation checking form with only HTML and CSS.
            </p>
        </article>

        <article class="project-section">
          <div class="text">
            <h2 class="gradient-greypink"> üí´ Reflectie</h2>
            <p>
            I learned a lot from Krijn this minor. Before this minor I didn't even know how to make a form and what features you get for free if you 
            write your HTML the right way. I learned a lot from the lessons and workshops and of course I made notations!
            </p>
          </div>
        </article>
    </div>

    <section class="topic">
  <h2>Form States & Validation</h2>
  <article>
    <ul>
      <li>Use CSS pseudo-classes: <code>:required</code>, <code>:valid</code>, <code>:invalid</code> for browser-based validation.</li>
      <li>Custom states like <code>user-invalid</code> allow for custom styling.</li>
      <li>Example selectors:
        <ul>
          <li>‚Üí <code> nput:user-valid { ... }</code></li>
          <li>‚Üí <code>input:user-invalid { ... }</code></li>
          <li>‚Üí <code>label:has(input:user-invalid) { ... }</code> ‚Äì style the label based on the child input state.</li>
        </ul>
      </li>
      <li>Use semantically correct structures like <code>&lt;label&gt;</code> and <code>&lt;input type="radio"&gt;</code>.</li>
      <li>Accessibility and usability are key factors in handling input states and errors.</li>
    </ul>
  </article>
</section>

<section class="topic">
  <h2>Invoker Commands & Future Vision</h2>
  <article>
    <ul>
      <li>Activate experimental browser features via <code>chrome://flags</code> or <code>about:flags</code>.</li>
      <li>Use native elements like <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> combined with JavaScript features like <code>.showPicker()</code>.</li>
      <li>Common issue: ‚Äútabbing is disabled‚Äù when using modal/popover improperly ‚Äî ensure focus management.</li>
      <li>JavaScript steps for custom commands:
        <ul>
          <li>‚Üí Declare variables</li>
          <li>‚Üí Use <code>addEventListener("click", ...)</code></li>
          <li>‚Üí Future ideas: use custom attributes like <code>--title-command</code></li>
        </ul>
      </li>
      <li>Reference: Invoker polyfill by Keithamus & the Open UI project.</li>
    </ul>
  </article>
</section>

<section class="topic">
  <h2>Forms & Fieldset Semantics</h2>
  <article>
    <ul>
      <li>Use <code>&lt;fieldset&gt;</code> with <code>&lt;legend&gt;</code> to group related fields semantically.</li>
      <li>Radio buttons must share the same <code>name</code> attribute to function as a group.</li>
      <li><code>fieldset.disabled</code> and <code>hidden</code> can be dynamically toggled via JavaScript.</li>
      <li><code>&lt;label&gt;</code> is essential for screen reader compatibility.</li>
      <li>Include <code>&lt;small&gt;</code> inside <code>&lt;label&gt;</code> for additional visual and semantic help text.</li>
    </ul>
  </article>
</section>

<section class="topic">
  <h2>Selection & UI Elements</h2>
  <article>
    <ul>
      <li>Use <code>&lt;select&gt;</code>, <code>&lt;option&gt;</code>, and <code>&lt;optgroup&gt;</code> to build dropdown menus.</li>
      <li>UX rule of thumb: when there are more than 7 options, use a dropdown for better usability.</li>
      <li><code>&lt;output&gt;</code> is used to display the result of a calculation or form interaction.</li>
      <li>For visual feedback:
        <ul>
          <li>‚Üí <code>&lt;progress&gt;</code> indicates ongoing processes</li>
          <li>‚Üí <code>&lt;meter&gt;</code> shows bounded values, like scores or ratings</li>
        </ul>
      </li>
      <li>Example: <code>&lt;meter max="100" value="65"&gt;</code></li>
    </ul>
  </article>
</section>

<section class="topic">
  <h2>Input Types & Best Practices</h2>
  <article>
    <ul>
      <li>Link form inputs and labels semantically: <code>&lt;label for="email"&gt;</code> with <code>&lt;input type="email" id="email"&gt;</code></li>
      <li>Supported input types include: <code>text</code>, <code>email</code>, <code>tel</code>, <code>url</code>, <code>number</code>, <code>search</code>, <code>checkbox</code>, <code>date</code>, <code>time</code>, <code>range</code>, <code>submit</code>, <code>radio</code>, <code>button</code>, <code>textarea</code>, <code>select</code></li>
      <li>Layout adjustments: control <code>field-sizing</code> and support resizable <code>&lt;textarea&gt;</code> fields.</li>
      <li>UX advice: avoid using a generic <code>&lt;button&gt;</code> without semantic meaning or clear function.</li>
      <li>For progressive disclosure, use semantic elements like <code>&lt;details&gt;</code> or enhance with <code>popover</code> behavior via JavaScript.</li>
    </ul>
  </article>
</section>
    </div>
  </div>
  
</div>

</section>
{% endblock %}